<script>
  // $(document).ready(function () {
  //     // Define an array of colors for the cards
  //     const colors = ['blue', 'green', 'red', 'purple', 'orange', 'yellow'];

  //     // Fetch data from the API when the page loads
  //     $.ajax({
  //         url: '/student_index/dashboard',
  //         method: 'GET',
  //         success: function (response) {
  //             console.log("API Response:", response); // Log the full response to inspect

  //             let data = response.data;

  //             // Check if the data is valid and if it's an array
  //             if (Array.isArray(data)) {
  //                 let groupedData = {};

  //                 // Group data by 'name'
  //                 data.forEach(item => {
  //                     if (!groupedData[item.name]) {
  //                         groupedData[item.name] = [];
  //                     }
  //                     groupedData[item.name].push(item); // Group items under their 'name'
  //                 });

  //                 // Iterate through the grouped data and create separate rows
  //                 for (let name in groupedData) {
  //                     let sectionHeader = `<h3>${name}</h3>`;
  //                     let rowHtml = `<div class="row" id="${name.replace(/\s+/g, '-').toLowerCase()}-row"></div>`; // Row for each category

  //                     // Append the header and row to the container
  //                     $('#categories-container').append(sectionHeader);
  //                     $('#categories-container').append(rowHtml);

  //                     // Iterate over each grouped item and create cards
  //                     groupedData[name].forEach((item, index) => {
  //                         // Cycle through colors array using the index
  //                         let color = colors[index % colors.length];

  //                         let cardHtml = `
  //                             <div class="col-md-4 col-sm-8 content-card">
  //                                 <div class="card-big-shadow">
  //                                     <div class="card card-just-text" data-background="color" data-color="${color}" data-radius="none">
  //                                         <div class="content" style="color: black;"> <!-- Ensures the text is black -->
  //                                             <h6 class="category" style="color: black;">${item.name}</h6>
  //                                             <h4 class="title"><a href="#" style="color: black;">${item.academicstrand}</a></h4>
  //                                             <p class="description" style="color: black;">${item.description}</p>
  //                                         </div>
  //                                     </div> <!-- end card -->
  //                                 </div>
  //                             </div>`;

  //                         // Append the card to the appropriate row
  //                         $(`#${name.replace(/\s+/g, '-').toLowerCase()}-row`).append(cardHtml);
  //                     });
  //                 }
  //             } else {
  //                 console.error("Data is not an array or is empty:", data);
  //             }
  //         },
  //         error: function (error) {
  //             console.error("Error fetching data:", error);
  //         }
  //     });
  // });
  $(document).ready(function () {
    const colors = ["blue", "green", "red", "purple", "orange", "yellow"];

    // Fetch data from the new dashboard API
    $.ajax({
      url: "/student_index/dashboard",
      method: "GET",
      success: function (response) {
        console.log("API Response:", response);

        let data = response.data;

        if (Array.isArray(data)) {
          let groupedData = {};

          // Group data by 'name' (st_name in this case)
          data.forEach((item) => {
            if (!groupedData[item.name]) {
              groupedData[item.name] = [];
            }
            groupedData[item.name].push(item);
          });

          // Iterate through grouped data and create cards for each group
          for (let name in groupedData) {
            let sectionHeader = `<h3>${name}</h3>`;
            let rowHtml = `<div class="row" id="${name
              .replace(/\s+/g, "-")
              .toLowerCase()}-row"></div>`;

            $("#categories-container").append(sectionHeader);
            $("#categories-container").append(rowHtml);

            groupedData[name].forEach((item, index) => {
              let color = colors[index % colors.length];

              // Create the card with the hidden strand ID (st_strand)
              let cardHtml = `
                            <div class="col-md-4 col-sm-8 content-card">
                                <div class="card-big-shadow">
                                    <div class="card card-just-text" data-background="color" data-color="${color}" data-radius="none">
                                        <div class="content" style="color: black;" data-strand-id="${item.strand}">
                                            <h6 class="category" style="color: black;">${item.name}</h6>
                                            <h4 class="title"><a href="#" style="color: black;">${item.academicstrand}</a></h4>
                                            <p class="description" style="color: black;">${item.description}</p>
                                        </div>
                                    </div>
                                </div>
                            </div>`;

              $(`#${name.replace(/\s+/g, "-").toLowerCase()}-row`).append(
                cardHtml
              );
            });
          }

          // Add click event listener to each card
          $(".content").on("click", function () {
            let strandId = $(this).data("strand-id"); // Get the hidden strand ID (st_strand)
            loadStrandDetails(strandId); // Load the strand details in the modal
          });
        } else {
          console.error("Data is not an array or is empty:", data);
        }
      },
      error: function (error) {
        console.error("Error fetching data:", error);
      },
    });

    // Function to load strand details from the /viewstrand API
    function loadStrandDetails(strandId) {
      $.ajax({
        url: "/student_index/viewstrand",
        method: "POST",
        data: { strand_id: strandId }, // Send the strand ID
        success: function (response) {
          if (response && response.data && response.data.length > 0) {
            let strand = response.data[0]; // Assuming one strand is returned

            // Populate the modal with strand data
            $("#modal-strand-name").text(strand.as_name);
            $("#modal-job-description").text(strand.job_desc);
            $("#modal-job-requirements").text(strand.job_req);
            $("#modal-skill-requirements").text(strand.job_skill);
            $("#modal-video-description").text(strand.video_desc);

            // Handle base64 video file
            if (
              strand.video_file &&
              strand.video_file.startsWith("data:video/mp4;base64,")
            ) {
              const videoSource = strand.video_file; // Base64 encoded video
              $("#modal-video-source").attr("src", videoSource);
              $("#modal-video-player")[0].load(); // Reload the video element to reflect changes
              $("#modal-video-player").show(); // Show the video player
            } else {
              // Handle missing or invalid video file
              console.warn("Invalid or missing video data.");
              $("#modal-video-source").attr("src", ""); // Clear the source
              $("#modal-video-player").hide(); // Hide the video player
            }

            // Handle YouTube video link
            if (strand.video_link) {
              let videoLink = strand.video_link;

              // Check if it's a YouTube link
              if (
                videoLink.includes("youtube.com") ||
                videoLink.includes("youtu.be")
              ) {
                let videoId = extractYouTubeId(videoLink);
                let embedUrl = `https://www.youtube.com/embed/${videoId}`;
                $("#modal-video-iframe").attr("src", embedUrl).show(); // Show iframe with YouTube video
              } else {
                $("#modal-video-iframe").hide(); // Hide iframe if no valid YouTube link
              }
            } else {
              $("#modal-video-iframe").hide(); // Hide iframe if there's no video link
            }

            $("#strandModal").modal("show"); // Show the modal
          } else {
            console.error("No strand data returned:", response);
          }
        },
        error: function (error) {
          console.error("Error fetching strand details:", error);
        },
      });
    }

    // Helper function to extract the YouTube video ID
    function extractYouTubeId(url) {
      const regex =
        /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/;
      const matches = url.match(regex);
      return matches ? matches[1] : null;
    }
  });
</script>
